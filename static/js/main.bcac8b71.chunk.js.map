{"version":3,"sources":["logo.svg","components/bar/Bar.js","helper/sortHelper.js","components/visualizer/Visualizer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Bar","percent","className","style","height","width","aux","queue","speed","percents","updateArray","numBars","a","mSort","length","bars","document","getElementsByClassName","ndx","change","setTimeout","getElementById","removeAttribute","low","high","mid","Math","floor","i","j","k","push","merge","quickSort","qSort","pivot","v","exch","partition","backgroundColor","array","val1","val2","temp","Visualizer","props","state","Array","from","random","bind","sort","reset","newArray","this","setState","setAttribute","e","options","selectedIndex","value","mergeSort","console","log","parseInt","Navbar","bg","Brand","href","id","Button","variant","onClick","map","index","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bcac8b71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./Bar.css\";\n\nconst Bar = ({percent}) => {\n    return <div className=\"bar\" style={{ height: `${percent}%`, width: `${500}px`}} />;\n}\n\nexport default Bar;","export async function bubbleSort(percents, updateArray, numBars) {\n  let newArray = percents;\n\n  for (let i = 0; i < newArray.length; i++) {\n    for (let j = 0; j < newArray.length; j++) {\n      if (newArray[j] > newArray[j + 1]) {\n        let temp = newArray[j];\n        newArray[j] = newArray[j + 1];\n        newArray[j + 1] = temp;\n        updateArray(newArray);\n        await sleep(1000 / numBars);\n      }\n    }\n  }\n}\n\n// Merge Sort\n\nlet aux = [];\nlet queue = [];\nlet speed = 10;\n\nexport async function mergeSort(percents, updateArray, numBars) {\n  aux = [];\n  queue = [];\n  speed = 10;\n  mSort(percents, 0, percents.length - 1);\n  debugger;\n\n  let bars = document.getElementsByClassName(\"bar\");\n  for (let ndx = 0; ndx < queue.length; ndx++) {\n    let change = queue[ndx];\n\n    setTimeout(() => {\n      bars[change[0]].style.height = `${change[1]}%`;\n      if (ndx == queue.length - 1) {\n        let disableResetButton = document.getElementById(\"resetButton\");  \n        disableResetButton.removeAttribute(\"disabled\");    \n      }\n    }, ndx * speed);\n  }\n}\n\nfunction mSort(percents, low, high) {\n  if (high <= low) return;\n  let mid = low + Math.floor((high - low) / 2);\n  mSort(percents, low, mid);\n  mSort(percents, mid + 1, high);\n  merge(percents, low, mid, high);\n}\n\nfunction merge(percents, low, mid, high) {\n  let i = low,\n    j = mid + 1;\n  for (let k = low; k <= high; k++) {\n    aux[k] = percents[k];\n  }\n\n  let change;\n  for (let k = low; k <= high; k++) {\n    if (i > mid) change = aux[j++];\n    else if (j > high) change = aux[i++];\n    else if (aux[j] < aux[i]) change = aux[j++];\n    else change = aux[i++];\n    percents[k] = change;\n    queue.push([k, change]);\n  }\n}\n\nexport function quickSort(percents) {\n  aux = [];\n  queue = [];\n  speed = 10;\n  qSort(percents, 0, percents.length - 1);\n  debugger;\n  let bars = document.getElementsByClassName(\"bar\");\n  for (let ndx = 0; ndx < queue.length; ndx++) {\n    let change = queue[ndx];\n\n    if (typeof change[1] === \"string\") {\n      setTimeout(() => {\n        bars[change[0]].style.backgroundColor = `${change[1]}`;\n      }, ndx * speed);\n    } else {\n      setTimeout(() => {\n        bars[change[0]].style.height = `${change[1]}%`;\n        if (ndx == queue.length - 1) {\n          let disableResetButton = document.getElementById(\"resetButton\");  \n          disableResetButton.removeAttribute(\"disabled\");    \n        }\n      }, ndx * speed);\n    }\n  }\n}\n\nfunction qSort(percents, low, high) {\n  if (high <= low) return;\n  let pivot = partition(percents, low, high);\n  qSort(percents, low, pivot - 1);\n  qSort(percents, pivot + 1, high);\n}\n\nfunction partition(percents, low, high) {\n  let i = low,\n    j = high + 1;\n  let v = percents[low];\n  queue.push([low, \"red\"]);\n  while (true) {\n    while (percents[++i] < v) if (i === high) break;\n    while (v < percents[--j]) if (j === low) break;\n    if (i >= j) break;\n    exch(percents, i, j);\n  }\n  queue.push([low, \"lightblue\"]);\n  exch(percents, low, j);\n  return j;\n}\n\nfunction exch(array, val1, val2) {\n  let temp = array[val1];\n\n  queue.push([val1, array[val2]]);\n  queue.push([val2, temp]);\n\n  array[val1] = array[val2];\n  array[val2] = temp;\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import \"./Visualizer.css\";\nimport React from \"react\";\nimport Navbar from 'react-bootstrap/Navbar';\nimport Button from 'react-bootstrap/Button';\n\nimport Bar from \"./../bar/Bar\";\nimport { bubbleSort, mergeSort, quickSort } from \"./../../helper/sortHelper\"\n\nclass Visualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      percents: Array.from({ length: props.numBars }, () => Math.random() * 100)\n    };\n    this.updateArray = this.updateArray.bind(this);\n    this.sort = this.sort.bind(this)\n    this.reset = this.reset.bind(this)\n\n  }\n\n  updateArray(newArray) {\n    this.setState(newArray)\n  }\n\n  sort() {\n    let disableButton = document.getElementById(\"sortButton\");\n    disableButton.setAttribute(\"disabled\", \"disabled\");\n\n    let disableResetButton = document.getElementById(\"resetButton\");\n    disableResetButton.setAttribute(\"disabled\", \"disabled\");\n\n    \n    let e = document.getElementById(\"sortSelect\");\n    let value = e.options[e.selectedIndex].value;\n    switch (value) {\n      case \"Merge\":\n        mergeSort(this.state.percents);\n        break;\n      case \"Quick\":\n        quickSort(this.state.percents);\n        break;\n      case \"Bubble\":\n        break;\n      default:\n        console.log(\"this is weird\")\n    }\n\n    // disableResetButton.removeAttribute(\"disabled\");\n\n\n    \n  }\n\n  reset() {\n    let e = document.getElementById(\"numBars\");\n    let value = e.options[e.selectedIndex].value;\n\n    let disableButton = document.getElementById(\"sortButton\");\n    disableButton.removeAttribute(\"disabled\");\n\n    \n\n    let newArray = Array.from({ length: parseInt(value, 10) }, () => Math.random() * 100)\n    this.setState({percents: newArray});\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar className=\"navBar\" bg=\"dark\">\n          <Navbar.Brand href=\"#home\">\n            <h1 className=\"title\">Sorting Visualizer 2</h1>\n          </Navbar.Brand>\n          <div className=\"actions\">\n          <select id=\"numBars\" className=\"numBars\">\n              <option value=\"100\">100</option>\n              <option value=\"200\">200</option>\n              <option value=\"300\">300</option>\n            </select>\n            <select id=\"sortSelect\" className=\"sortSelect\">\n              <option value=\"Merge\">Merge</option>\n              <option value=\"Quick\">Quick</option>\n              <option value=\"Bubble\">Bubble</option>\n            </select>\n            <Button id = \"sortButton\" className=\"sort\" variant=\"secondary\" onClick={this.sort} >Sort</Button>\n            <Button id = \"resetButton\" className=\"reset\" variant=\"danger\" onClick={this.reset}>Reset</Button>\n          </div>\n        </Navbar>\n\n        <div className=\"temp\">\n          <div className=\"container\">\n            {this.state.percents.map(function (percent, index) {\n              return <Bar key={index} percent={percent} />;\n            })}\n          </div>\n          \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Visualizer;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Visualizer from \"./components/visualizer/Visualizer\";\nimport Navbar from 'react-bootstrap/Navbar';\nimport Button from 'react-bootstrap/Button';\nimport { bubbleSort, mergeSort, quickSort } from \"./helper/sortHelper\";\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Visualizer numBars={100} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}